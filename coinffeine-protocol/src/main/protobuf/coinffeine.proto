package coinffeine.protocol;

option java_package = "coinffeine.protocol.protobuf";
option java_outer_classname = "CoinffeineProtobuf";
option java_generic_services = true;

message BtcAmount {
    required int64 value = 1;
    required int32 scale = 2;
}

message FiatAmount {
    required int64 value = 1;
    required int32 scale = 2;
    required string currency = 3;
}

message Price {
    required int64 value = 1;
    required int32 scale = 2;
    required string currency = 3;
}

message Market {
    required string currency = 1;
}

message OrderBookEntry {
    enum OrderType {
        BID = 0;
        ASK = 1;
    }
    required string id = 1;
    required OrderType orderType = 2;
    required BtcAmount amount = 3;
    required Price price = 4;
}

message PeerPositions {
    required string nonce = 1;
    required Market market = 2;
    repeated OrderBookEntry entries = 3;
}

message PeerPositionsReceived {
    required string nonce = 1;
}

message QuoteRequest {
    required Market market = 1;
}

message Quote {
    required Market market = 1;
    optional Price highestBid = 2;
    optional Price lowestAsk = 3;
    optional Price lastPrice = 4;
}

message OrderMatch {
    required string orderId = 1;
    required string exchangeId = 2;
    required BtcAmount bitcoinAmount = 3;
    required FiatAmount fiatAmount = 4;
    required int64 lockTime = 5;
    required string counterpart = 6;
}

message OpenOrdersRequest {
    required Market market = 1;
}

message OpenOrders {
    required PeerPositions orders = 1;
}

message ExchangeAborted {
    required string exchangeId = 1;
    required string reason = 2;
}

message ExchangeRejection {
    required string exchangeId = 1;
    required string reason = 2;
}

message PeerHandshake {
    required string exchangeId = 1;
    required bytes publicKey = 2;
    required string paymentProcessorAccount = 3;
}

message RefundSignatureRequest {
    required string exchangeId = 1;
    required bytes refundTx = 2;
}

message RefundSignatureResponse {
    required string exchangeId = 1;
    required bytes transactionSignature = 2;
}

// Sent by the parts to enter an exchange with a deposit commitment
message ExchangeCommitment {
    required string exchangeId = 1;
    required bytes publicKey = 2;
    required bytes commitmentTransaction = 3;
}

// Notification to the exchange parts of the actual commitments
message CommitmentNotification {
    required string exchangeId = 1;
    required bytes buyerTxId = 2;
    required bytes sellerTxId = 3;
}

// Confirmation make by an exchange part of having received the commitment notification
message CommitmentNotificationAck {
    required string exchangeId = 1;
}

message StepSignature {
    required string exchangeId = 1;
    required int32 step = 2;
    required bytes buyerDepositSignature = 3;
    required bytes sellerDepositSignature = 4;
}

message PaymentProof {
    required string exchangeId = 1;
    required int32 step = 2;
    required string paymentId = 3;
}

message MicropaymentChannelClosed {
    required string exchangeId = 1;
}

message Payload {
    optional CommitmentNotification commitmentNotification = 1;
    optional CommitmentNotificationAck commitmentNotificationAck = 2;
    optional ExchangeAborted exchangeAborted = 3;
    optional ExchangeCommitment exchangeCommitment = 4;
    optional ExchangeRejection exchangeRejection = 5;
    optional MicropaymentChannelClosed micropaymentChannelClosed = 6;
    optional OpenOrders openOrders = 7;
    optional OpenOrdersRequest openOrderRequest = 8;
    optional OrderMatch orderMatch = 9;
    optional PaymentProof paymentProof = 10;
    optional PeerHandshake peerHandshake = 11;
    optional PeerPositions peerPositions = 12;
    optional PeerPositionsReceived peerPositionsReceived = 13;
    optional Quote quote = 14;
    optional QuoteRequest quoteRequest = 15;
    optional RefundSignatureRequest refundSignatureRequest = 16;
    optional RefundSignatureResponse refundSignatureResponse = 17;
    optional StepSignature stepSignature = 18;
}

message ProtocolVersion {
    required int32 major = 1;
    required int32 minor = 2;
}

message CoinffeineMessage {
    required ProtocolVersion version = 1;
    required Payload payload = 2;
}
