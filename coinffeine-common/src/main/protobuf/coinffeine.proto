// Copyright (C) 2013 Bitwise
// All rights reserved

package coinffeine.protocol;

option java_package = "com.coinffeine.common.protocol.protobuf";
option java_outer_classname = "CoinffeineProtobuf";
option java_generic_services = true;

message BtcAmount {
    required int64 value = 1;
    required int32 scale = 2;
}

message FiatAmount {
    required int64 value = 1;
    required int32 scale = 2;
    required string currency = 3;
}

enum OrderType {
    BID = 0;
    ASK = 1;
}

message Order {
    required OrderType type = 1;
    required BtcAmount amount = 2;
    required FiatAmount price = 3;
}

message OrderResponse {
    enum Result {
        SUCCESS = 0;
        CURRENCY_NOT_TRADED = 1;
    }
    required Result result = 1;
}

message OrderCancellation {
    required string currency = 1;
}

message QuoteRequest {
    required string currency = 1;
}

message Quote {
    optional FiatAmount highestBid = 1;
    optional FiatAmount lowestAsk = 2;
    optional FiatAmount lastPrice = 3;
}

message QuoteResponse {
    enum Result {
        FOUND_QUOTE = 1;
        CURRENCY_NOT_TRADED = 2;
        UNKNOWN_CURRENCY = 3;
        TIMEOUT = 4;
    }
    required Result result = 1;
    optional Quote quote = 2;
}

message OrderMatch {
    required string exchangeId = 1;
    required BtcAmount amount = 2;
    required FiatAmount price = 3;
    required string buyer = 4;
    required string seller = 5;
}

message ExchangeAborted {
    required string exchangeId = 1;
    required string reason = 2;
}

message ExchangeRejection {
    required string exchangeId = 1;
    required string reason = 2;
}

message CommitmentNotification {
    required string exchangeId = 1;
    required bytes buyerTxId = 2;
    required bytes sellerTxId = 3;
}

message RefundTxSignatureRequest {
    required string exchangeId = 1;
    required bytes refundTx = 2;
}

message RefundTxSignatureResponse {
    required string exchangeId = 1;
    required bytes transactionSignature = 2;
}

message EnterExchange {
    required string exchangeId = 1;
    required bytes commitmentTransaction = 2;
}

service BrokerService {
    rpc RequestQuote (QuoteRequest) returns (QuoteResponse);
    rpc PlaceOrder (Order) returns (OrderResponse);
}

message Void {}

service PeerService {
    rpc AbortExchange (ExchangeAborted) returns (Void);
    rpc BeginExchange (EnterExchange) returns (Void);
    rpc NotifyCommitment (CommitmentNotification) returns (Void);
    rpc NotifyMatch (OrderMatch) returns (Void);
    rpc RejectExchange (ExchangeRejection) returns (Void);
    rpc RequestTxRefundSignature (RefundTxSignatureRequest) returns (Void);
    rpc SubmitTxRefundSignature (RefundTxSignatureResponse) returns (Void);
}
